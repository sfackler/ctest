var searchIndex = {};
searchIndex["ctest"] = {"doc":"ctest - an FFI binding validator","items":[[3,"TestGenerator","ctest","A builder used to generate a test suite.",null,null],[11,"new","","Creates a new blank test generator.",0,{"inputs":[],"output":{"name":"testgenerator"}}],[11,"header","","Add a header to be included as part of the generated C file.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"testgenerator"}}],[11,"include","","Add a path to the C compiler header lookup path.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"testgenerator"}}],[11,"flag","","Add a flag to the C compiler invocation.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"testgenerator"}}],[11,"out_dir","","Configures the output directory of the generated Rust and C code.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"testgenerator"}}],[11,"target","","Configures the target to compile C code for.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"testgenerator"}}],[11,"define","","Set a `-D` flag for the C compiler being called.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"testgenerator"}}],[11,"cfg","","Set a `--cfg` option with which to expand the Rust FFI crate.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"testgenerator"}}],[11,"type_name","","Configures how a Rust type name is translated to a C type name.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"field_name","","Configures how a Rust struct field is translated to a C struct field.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_field","","Configures whether all tests for a field are skipped or not.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_field_type","","Configures whether tests for the type of a field is skipped or not.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_signededness","","Configures whether a types signededness is tested or not.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_fn","","Configures whether tests for a function definition are generated.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_fn_ptrcheck","","Configures whether tests for a function pointer's value are generated.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_const","","Configures whether the tests for a constant's value are generated.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_type","","Configures whether the tests for a typedef are emitted.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"skip_struct","","Configures whether the tests for a struct are emitted.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"fn_cname","","Configures the name of a function in the generate C code.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"testgenerator"}}],[11,"generate","","Generate all tests.",0,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":null}]],"paths":[[3,"TestGenerator"]]};
initSearch(searchIndex);
